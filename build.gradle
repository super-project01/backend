plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'super'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// spring boot web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// jpa
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// spring security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// 서버를 재실행 안해줘도 바로 처리가능하게 만드는 라이브러리
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// mysql
	runtimeOnly 'com.mysql:mysql-connector-j'

	//swagger
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// email
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.hibernate.validator:hibernate-validator'
}

jar {
	// ~~plain.jar파일은 생성되지 않게
	enabled = false
}
tasks.named('test') {
	useJUnitPlatform()
}
